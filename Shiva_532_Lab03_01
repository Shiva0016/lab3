#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
	struct sNode
	{
	   char data;
	   struct sNode *next;
	};
		void push(struct sNode** top_ref, int new_data);
		int pop(struct sNode** top_ref);
		int valid(char exp[]);
		int equal(char ch1, char ch2);
			int main()
			{
			  char exp[50];
			    printf("Enter expression:\n");
			    scanf("%s",exp);
			    system("cls");
			  if(valid(exp))
			    printf("Valid Mathematical Expressions \n");
			  else
			    printf("Invalid Mathematical Expressions \n");  \
			  getchar();
			}    
	void push(struct sNode** top_ref, int new_data)
	{
	  struct sNode* new_node = (struct sNode*) malloc(sizeof(struct sNode)); 
	  if(new_node == NULL)
	  {
	     printf("Stack Overflow!!! \n");
	     getchar();
	     exit(0);
	  }          
	  new_node->data=new_data;
	  new_node->next=(*top_ref); 
	  (*top_ref)= new_node;
	}
		int pop(struct sNode** top_ref)
		{
		  char res;
		  struct sNode *top;	  
		  if(*top_ref == NULL)
		  {
		     printf("Stack overflow \n");
		     getchar();
		     exit(0);
		  }
		  else
		  {
		     top = *top_ref;
		     res = top->data;
		     *top_ref = top->next;
		     free(top);
		     return res;
		  }
		}
	int equal(char ch1, char ch2)
	{
	   if(ch1 == '(' && ch2 == ')')
	     return 1;
	   else if(ch1 == '{' && ch2 == '}')
	     return 1;
	   else if(ch1 == '[' && ch2 == ']')
	     return 1;
	   else
	     return 0;
	}
		int valid(char exp[])
		{
		   int i = 0;
		   struct sNode *stack = NULL;
		   while(exp[i])
		   {
		      if(exp[i] == '{' || exp[i] == '(' || exp[i] == '[')
		        push(&stack, exp[i]);
		      if(exp[i] == '}' || exp[i] == ')' || exp[i] == ']')
		      {
		         if(stack == NULL)
		           return 0;
		           else if ( !equal(pop(&stack), exp[i]) )
		           return 0;
		      }
		      i++;
		   }
		   if(stack == NULL)
		     return 1;
		     else
		     return 0;
		}
