#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <math.h>
#define MAX 100
typedef struct 
{
int top;
char items[MAX];
} stack ;
void postfix(char *, char *);
int precedence(char, char);             
int num(int);
void popt(stack *, char *, int *);
void push(stack *, char);
char pop(stack *); 
int main()
{
	char infix[MAX];
	char post[MAX];
	printf ("Infix Expression: \n");
	scanf("%s",&infix);
	system("cls");
	printf ("Infix  Expression:  = %s \n", infix);
	postfix(infix,post);
	printf ("Postfix Expression: = %s", post);
	getch();
}
void push(stack *s, char c)         
{
	if (s->top==(MAX-1))
	{
		printf ("FULL!!!\n");
		getch();
		exit(1);	
	} 
	else
	{
		s-> items[++(s->top)]=c;
	}
}
char pop(stack *s)        
{
	if (s->top == -1)
	{
		printf ("EMPTY!!!\n");
		getch();
		exit (1);
	}
 	else 
	{
		return(s-> items[s->top--]);
	}
}
void postfix(char infix[],char postfix[])    
{	
	stack s;
	s.top = -1;
	char val, tval = '+';
	int i = 0, und, outpos = 0;	
	for (i = 0; (val = infix[i]) != '\0'; i++) 
	{
		if (num(val)) 
		{
			postfix[outpos++] = val;
		} 
		else 
		{
			popt (&s, &tval, &und);
			while (!und && precedence(tval,val)) 
			{
				postfix[outpos++] = tval;
				popt (&s, &tval, &und);
			}
			if (!und) 
			{
				push (&s,tval);
			} 
			if (und || (val != ')')) 
			{
				push (&s,val);
			}
			else 
			{
				tval = pop(&s);
			}
		}
	}
	while (s.top != -1) 
	{
		postfix[outpos++] = pop(&s);
	}
		postfix[outpos] = '\0';
		return;
}
int num(int val) 
{
	return (val >= '0' && val <= '9');
}
int precedence(char i, char j) 
{
	int a,b;
	switch (i) 
	{
		case '(' : a = 7; 
		break;
		case '$' : a = 3; 
		break;
		case '*' : a = 2; 
		break;
		case '/' : a = 2; 
		break;
		case '+' : a = 1; 
		break;
		case '-' : a = 1; 
		break;
		default  : printf ("Invalid expression!!! \n");
	}
	switch (j) 
	{
		case '(' : b = 7; 
		break;
		case ')' : b = 0; 
		break;
		case '$' : b = 3; 
		break;
		case '*' : b = 2; 
		break;
		case '/' : b = 2; 
		break;
		case '+' : b = 1; 
		break;
		case '-' : b = 1; 
		break;
		default  : printf ("Invalid Expression!!! \n");
	}
	return (a>b);
}
void popt(stack *s, char *x, int *und) 
{
	if (s->top == -1) 
	{
		*und = 1;
		return;
	}
	*und = 0;
	*x = s-> items[s->top--];
	return;
}

